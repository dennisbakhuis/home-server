version: "3.7"


##############
## networks ##
##############
networks:
  t2_proxy:
    external:
      name: t2_proxy


#############
## Volumes ##
#############
volumes:
  teslamate-grafana-data:
  teslamate-app-data:


##############
## services ##
##############
services:


  #############
  ## traefik ##
  #############
  traefik:
    container_name: traefik
    image: traefik:v2.11.2
    restart: unless-stopped
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.synology-https.address=:5001
      - --entryPoints.ssh.address=:22
      # - --entryPoints.ssh.address=:22
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20, 103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 141.101.64.0/18, 108.162.192.0/18, 190.93.240.0/20, 188.114.96.0/20, 197.234.240.0/22, 198.41.128.0/17, 162.158.0.0/15, 172.64.0.0/13, 131.0.72.0/22, 104.16.0.0/13, 104.24.0.0/14, 192.168.0.0/24
      - --entryPoints.traefik.address=:6081
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik_log/traefik.log
      - --accessLog.bufferingSize=100
      # - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: $TRAEFIKIP
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 6081
        published: 6081
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/logs:/traefik_log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-white-list@file"


  ##############
  ### pi-hole ##
  ##############
  #pihole:
  #  container_name: pihole
  #  domainname: docker
  #  hostname: pihole
  #  image: pihole/pihole:latest
  #  ports:
  #    - '53:53/tcp'
  #    - '53:53/udp'
  #    - '8182:80'
  #    - '8183:443'
  #  restart: unless-stopped
  #  # depends_on:
  #  #   - traefik
  #  volumes:
  #    - $DOCKERDIR/pihole/pihole:/etc/pihole
  #    - $DOCKERDIR/pihole/dnsmasq.d:/etc/dnsmasq.d
  #  networks:
  #    - t2_proxy
  #  environment:
  #    - VIRTUAL_HOST=pihole.$DOMAINNAME
  #    - VIRTUAL_PORT=80
  #    - TZ=$TZ
  #    - WEBPASSWORD=$PIHOLEWEBPASSWORD
  #    - DNS1=$PIHOLE_LOCAL_DNS
  #    - DNS2=$PIHOLE_UPSTREAM_DNS
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.http.routers.pihole-rtr.entrypoints=https"
  #    - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
  #    - "traefik.http.routers.pihole-rtr.middlewares=chain-white-list@file"
  #    - "traefik.http.routers.pihole-rtr.service=pihole-svc"
  #    - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"


  ############
  ## deconz ##
  ############
  # deconz:
  #   image: deconzcommunity/deconz:latest
  #   container_name: deconz
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   ports:
  #     - '2080:2080'
  #     - '5090:5090'
  #     - '2081:2081'
  #     - '6080:6080'
  #   volumes:
  #     - $DOCKERDIR/deconz:/opt/deCONZ
  #     - /etc/localtime:/etc/localtime:ro
  #   devices:
  #     - /dev/ttyACM1  # Zigbee
  #   environment:
  #     - DECONZ_WEB_PORT=2080
  #     - DECONZ_WS_PORT=2081
  #     - DEBUG_INFO=1
  #     - DEBUG_APS=0
  #     - DEBUG_ZCL=0
  #     - DEBUG_ZDP=0
  #     - DEBUG_OTAU=0
  #     - DECONZ_DEVICE=/dev/ttyACM1
  #     - DECONZ_VNC_MODE=1
  #     - DECONZ_VNC_PORT=5900
  #     - DECONZ_VNC_PASSWORD=$VNCPASSWORD
  #     - DECONZ_NOVNC_PORT=6080
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.deconz-rtr.entrypoints=https"
  #     - "traefik.http.routers.deconz-rtr.rule=Host(`deconz.$DOMAINNAME`)"
  #     - "traefik.http.routers.deconz-rtr.middlewares=chain-white-list@file"
  #     - "traefik.http.routers.deconz-rtr.service=deconz-svc"
  #     - "traefik.http.services.deconz-svc.loadbalancer.server.port=2080"


  #######################
  ## mosquitto-eclipse ##
  #######################
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    network_mode: host
    restart: unless-stopped
    volumes:  # not using persistence
      - $DOCKERDIR/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - $DOCKERDIR/secrets/mosquitto.passwd:/mosquitto/config/mosquitto.passwd
      - /etc/localtime:/etc/localtime:ro


  ##############
  ### zwavejs ##
  ##############
  #zwavejs:
  #  container_name: zwavejs
  #  image: zwavejs/zwavejs2mqtt:latest
  #  volumes:
  #    - $DOCKERDIR/zwavejs:/usr/src/app/store
  #    - /etc/localtime:/etc/localtime:ro
  #  restart: unless-stopped
  #  networks:
  #    - t2_proxy
  #  ports:
  #    - '8091:8091'
  #    - '3000:3000'
  #  devices:
  #    - /dev/ttyACM0  # Z-wave
  #  environment:
  #    - TZ=$TZ


  ####################
  ## home-assistant ##
  ####################
  # home-assistant is added using yaml files to traefik
  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:latest
    volumes:
      - $DOCKERDIR/homeassistant/config:/config
      - $DOCKERDIR/secrets.yaml:/config/secrets.yaml:ro
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    devices:
      - /dev/ttyUSB0  # DSMR
    labels:
      - "traefik.enable=false"


########################
## visual studio code ##
########################
  vscode:
    container_name: vscode
    image: lscr.io/linuxserver/code-server
    ports:
      - "8443:8443"
    networks:
      - t2_proxy
    restart: unless-stopped
    volumes:
      - $DOCKERDIR:/bakhuis
      - $DOCKERDIR/vscode:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DEFAULT_WORKSPACE=/bakhuis
      # - PASSWORD=$VSCPASSWORD
      - PROXY_DOMAIN=$VSC_DOMAIN
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.visualstudiocode-rtr.entrypoints=https"
      - "traefik.http.routers.visualstudiocode-rtr.rule=Host(`visualstudiocode.$DOMAINNAME`)"
      - "traefik.http.routers.visualstudiocode-rtr.middlewares=chain-white-list@file"
      - "traefik.http.routers.visualstudiocode-rtr.service=visualstudiocode-svc"
      - "traefik.http.services.visualstudiocode-svc.loadbalancer.server.port=8443"


###############
## AppDaemon ##
###############
  # appdaemon:
  #   container_name: appdaemon
  #   image: acockburn/appdaemon:latest
  #   volumes:
  #     - $DOCKERDIR/appdaemon/conf:/conf
  #     - $DOCKERDIR/secrets.yaml:/conf/secrets.yaml:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - '5050:80'
  #   networks:
  #     - t2_proxy
  #   restart: unless-stopped
  #   user: "$PUID:$PGID"
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #   depends_on:
  #     - homeassistant
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.appdaemon-rtr.entrypoints=https"
  #     - "traefik.http.routers.appdaemon-rtr.rule=Host(`appdaemon.$DOMAINNAME`)"
  #     - "traefik.http.routers.appdaemon-rtr.middlewares=chain-white-list@file"
  #     - "traefik.http.routers.appdaemon-rtr.service=appdaemon-svc"
  #     - "traefik.http.services.appdaemon-svc.loadbalancer.server.port=80"


  ##############
  ## node-red ##
  ##############
  node-red:
    container_name: node-red
    image: nodered/node-red:latest
    volumes:
      - $DOCKERDIR/node_red:/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - '1880:1880'
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    user: "$PUID:$PGID"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered-rtr.entrypoints=https"
      - "traefik.http.routers.nodered-rtr.rule=Host(`nodered.$DOMAINNAME`)"
      - "traefik.http.routers.nodered-rtr.middlewares=chain-white-list@file"
      - "traefik.http.routers.nodered-rtr.service=nodered-svc"
      - "traefik.http.services.nodered-svc.loadbalancer.server.port=1880"


  ###############################
  ## growatt monitoring: grott ##
  ###############################
  grott:
    image: ledidobe/grott:latest
    container_name: grott
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=$TZ
      - ginvtype=tl3
      - gmqttip=$SERVERIP
      - gmqttauth=True
      - gmqttuser=$MQTT_USER
      - gmqttpassword=$MQTT_PASSWORD
      - gpvoutput=True
      - gpvapikey=$PVORG_API_KEY
      - gpvsystemid=$PVORG_SYSTEM_ID
      - gblockcmd=True


  ##############
  ## heimdall ##
  ##############
  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    networks:
      - t2_proxy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/heimdall:/config
    ports:
      - 1080:80
      - 1443:443
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"


  ############################
  # Voorvoet_importeer_tool ##
  ############################
  voorvoet_import_tool:
    image: dennisbakhuis/voorvoet_eboekhouden_app:latest
    container_name: voorvoet_eboekhouden
    networks:
      - t2_proxy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - EBOEKHOUDEN_USERNAME=$EBOEKHOUDEN_USERNAME
      - EBOEKHOUDEN_CODE1=$EBOEKHOUDEN_CODE1
      - EBOEKHOUDEN_CODE2=$EBOEKHOUDEN_CODE2
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 1081:80
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.eboekhouden-rtr.entrypoints=https"
      - "traefik.http.routers.eboekhouden-rtr.rule=Host(`eboekhouden.$DOMAINNAME`)"
      - "traefik.http.routers.eboekhouden-rtr.service=eboekhouden-svc"
      - "traefik.http.routers.eboekhouden-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.eboekhouden-svc.loadbalancer.server.port=80"


  ################
  ## Tesla Mate ##
  ################
  tesla_grafana:
    image: teslamate/grafana:latest
    container_name: tesla_grafana
    networks:
      - t2_proxy
    environment:
      - TZ=$TZ
      - DATABASE_USER=$TESLA_DATABASE_USERNAME
      - DATABASE_PASS=$TESLA_DATABASE_PASSWORD
      - DATABASE_NAME=$TESLA_DATABASE_NAME
      - DATABASE_HOST=$TESLA_DATABASE_HOST
      - DATABASE_PORT=$TESLA_DATABASE_PORT
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - teslamate-grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tesla-grafana-rtr.entrypoints=https"
      - "traefik.http.routers.tesla-grafana-rtr.rule=Host(`tesla.$DOMAINNAME`)"
      - "traefik.http.routers.tesla-grafana-rtr.service=tesla-grafana-svc"
      - "traefik.http.routers.tesla-grafana-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.tesla-grafana-svc.loadbalancer.server.port=3000"

  teslamate:
    image: teslamate/teslamate:latest
    container_name: teslamate
    networks:
      - t2_proxy
    environment:
      - TZ=$TZ
      - ENCRYPTION_KEY=$TESLA_ENCRYPTION_KEY
      - DATABASE_USER=$TESLA_DATABASE_USERNAME
      - DATABASE_PASS=$TESLA_DATABASE_PASSWORD
      - DATABASE_NAME=$TESLA_DATABASE_NAME
      - DATABASE_HOST=$TESLA_DATABASE_HOST
      - DATABASE_PORT=$TESLA_DATABASE_PORT
      - MQTT_HOST=$SERVERIP
      - MQTT_USERNAME=$MQTT_USER
      - MQTT_PASSWORD=$MQTT_PASSWORD
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - teslamate-app-data:/opt/app/import
    ports:
      - 4000:4000
    cap_drop:
      - all
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.teslamate-rtr.entrypoints=https"
      - "traefik.http.routers.teslamate-rtr.rule=Host(`teslamate.$DOMAINNAME`)"
      - "traefik.http.routers.teslamate-rtr.service=teslamate-svc"
      - "traefik.http.routers.teslamate-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.teslamate-svc.loadbalancer.server.port=4000"

  # zigbee2mqtt:
  #   container_name: zigbee2mqtt
  #   image: koenkk/zigbee2mqtt
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   environment:
  #     - TZ=$TZ
  #   volumes:
  #     - $DOCKERDIR/zigbee2mqtt:/app/data
  #   ports:
  #     - 1082:8080
