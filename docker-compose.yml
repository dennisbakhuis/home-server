##########################
# Bakhuis home server    #
# Author: Dennis Bakhuis #
##########################

##############
## networks ##
##############
networks:
  t2_proxy:
    external: true


#############
## Volumes ##
#############
volumes:
  teslamate-grafana-data:
  teslamate-app-data:


##############
## services ##
##############
services:

  #############
  ## traefik ##
  #############
  traefik:
    container_name: traefik
    image: traefik:v3.1
    restart: unless-stopped
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20, 103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 141.101.64.0/18, 108.162.192.0/18, 190.93.240.0/20, 188.114.96.0/20, 197.234.240.0/22, 198.41.128.0/17, 162.158.0.0/15, 172.64.0.0/13, 131.0.72.0/22, 104.16.0.0/13, 104.24.0.0/14, 192.168.0.0/24
      - --api=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik_log/traefik.log
      - --accessLog.bufferingSize=100
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: $TRAEFIKIP
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik/logs:/traefik_log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-white-list@file"


  #######################
  ## mosquitto-eclipse ##
  #######################
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    network_mode: host
    restart: unless-stopped
    volumes:  # not using persistence
      - $DOCKERDIR/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - $DOCKERDIR/secrets/mosquitto.passwd:/mosquitto/config/mosquitto.passwd
      - /etc/localtime:/etc/localtime:ro


  ####################
  ## home-assistant ##
  ####################
  # home-assistant is added using yaml files to traefik
  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:latest
    volumes:
      - $DOCKERDIR/homeassistant/config:/config
      - $DOCKERDIR/secrets.yaml:/config/secrets.yaml:ro
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    devices:
      - /dev/ttyUSB0  # DSMR
    labels:
      - "traefik.enable=false"


########################
## visual studio code ##
########################
  vscode:
    container_name: vscode
    image: lscr.io/linuxserver/code-server
    ports:
      - "8443:8443"
    networks:
      - t2_proxy
    restart: unless-stopped
    volumes:
      - $DOCKERDIR:/bakhuis
      - $DOCKERDIR/vscode:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DEFAULT_WORKSPACE=/bakhuis
      # - PASSWORD=$VSCPASSWORD
      - PROXY_DOMAIN=$VSC_DOMAIN
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.visualstudiocode-rtr.entrypoints=https"
      - "traefik.http.routers.visualstudiocode-rtr.rule=Host(`visualstudiocode.$DOMAINNAME`)"
      - "traefik.http.routers.visualstudiocode-rtr.middlewares=chain-white-list@file"
      - "traefik.http.routers.visualstudiocode-rtr.service=visualstudiocode-svc"
      - "traefik.http.services.visualstudiocode-svc.loadbalancer.server.port=8443"


  ##############
  ## node-red ##
  ##############
  node-red:
    container_name: node-red
    image: nodered/node-red:latest
    volumes:
      - $DOCKERDIR/node_red:/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - '1880:1880'
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    user: "$PUID:$PGID"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered-rtr.entrypoints=https"
      - "traefik.http.routers.nodered-rtr.rule=Host(`nodered.$DOMAINNAME`)"
      - "traefik.http.routers.nodered-rtr.middlewares=chain-white-list@file"
      - "traefik.http.routers.nodered-rtr.service=nodered-svc"
      - "traefik.http.services.nodered-svc.loadbalancer.server.port=1880"


  ###############################
  ## growatt monitoring: grott ##
  ###############################
  grott:
    image: ledidobe/grott:latest
    container_name: grott
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=$TZ
      - ginvtype=tl3
      - gmqttip=$SERVERIP
      - gmqttauth=True
      - gmqttuser=$MQTT_USER
      - gmqttpassword=$MQTT_PASSWORD
      - gpvoutput=True
      - gpvapikey=$PVORG_API_KEY
      - gpvsystemid=$PVORG_SYSTEM_ID
      - gblockcmd=True


  ##############
  ## heimdall ##
  ##############
  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    networks:
      - t2_proxy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/heimdall:/config
    ports:
      - 1080:80
      - 1443:443
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"


  ############################
  # Voorvoet_importeer_tool ##
  ############################
  voorvoet_import_tool:
    image: dennisbakhuis/voorvoet_eboekhouden_app:latest
    container_name: voorvoet_eboekhouden
    networks:
      - t2_proxy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - EBOEKHOUDEN_USERNAME=$EBOEKHOUDEN_USERNAME
      - EBOEKHOUDEN_CODE1=$EBOEKHOUDEN_CODE1
      - EBOEKHOUDEN_CODE2=$EBOEKHOUDEN_CODE2
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 1081:80
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.eboekhouden-rtr.entrypoints=https"
      - "traefik.http.routers.eboekhouden-rtr.rule=Host(`eboekhouden.$DOMAINNAME`)"
      - "traefik.http.routers.eboekhouden-rtr.service=eboekhouden-svc"
      - "traefik.http.routers.eboekhouden-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.eboekhouden-svc.loadbalancer.server.port=80"


  ################
  ## tesla mate ##
  ################
  tesla_grafana:
    image: teslamate/grafana:latest
    container_name: tesla_grafana
    networks:
      - t2_proxy
    environment:
      - tz=$TZ
      - database_user=$TESLA_DATABASE_USERNAME
      - database_pass=$TESLA_DATABASE_PASSWORD
      - database_name=$TESLA_DATABASE_NAME
      - database_host=$TESLA_DATABASE_HOST
      - database_port=$TESLA_DATABASE_PORT
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - teslamate-grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tesla-grafana-rtr.entrypoints=https"
      - "traefik.http.routers.tesla-grafana-rtr.rule=host(`tesla.$DOMAINNAME`)"
      - "traefik.http.routers.tesla-grafana-rtr.service=tesla-grafana-svc"
      - "traefik.http.routers.tesla-grafana-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.tesla-grafana-svc.loadbalancer.server.port=3000"

  teslamate:
    image: teslamate/teslamate:latest
    container_name: teslamate
    networks:
      - t2_proxy
    environment:
      - TZ=$TZ
      - ENCRYPTION_KEY=$TESLA_ENCRYPTION_KEY
      - DATABASE_USER=$TESLA_DATABASE_USERNAME
      - DATABASE_PASS=$TESLA_DATABASE_PASSWORD
      - DATABASE_NAME=$TESLA_DATABASE_NAME
      - DATABASE_HOST=$TESLA_DATABASE_HOST
      - DATABASE_PORT=$TESLA_DATABASE_PORT
      - MQTT_HOST=$SERVERIP
      - MQTT_USERNAME=$MQTT_USER
      - MQTT_PASSWORD=$MQTT_PASSWORD
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - teslamate-app-data:/opt/app/import
    ports:
      - 4000:4000
    cap_drop:
      - all
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.teslamate-rtr.entrypoints=https"
      - "traefik.http.routers.teslamate-rtr.rule=Host(`teslamate.$DOMAINNAME`)"
      - "traefik.http.routers.teslamate-rtr.service=teslamate-svc"
      - "traefik.http.routers.teslamate-rtr.middlewares=chain-white-list@file"
      - "traefik.http.services.teslamate-svc.loadbalancer.server.port=4000"


  ###########
  ## Kafka ##
  ###########
  # kafka:
  #   image: apache/kafka:latest
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093,t2_proxy://0.0.0.0:9094
  #     KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093,t2_proxy://0.0.0.0:9094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT,t2_proxy:PLAINTEXT
  #     KAFKA_NODE_ID: 1
  #     KAFKA_PROCESS_ROLES: broker,controller
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
  #     KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   restart: unless-stopped

  # kafkaui:
  #   container_name: kafkaui
  #   image: provectuslabs/kafka-ui:latest
  #   networks:
  #     - t2_proxy
  #   ports:
  #     - 8080:8080
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: BakhuisCluster
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9094
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.kafkaui-rtr.entrypoints=https"
  #     - "traefik.http.routers.kafkaui-rtr.rule=Host(`kafkaui.$DOMAINNAME`)"
  #     - "traefik.http.routers.kafkaui-rtr.service=kafkaui-svc"
  #     - "traefik.http.routers.kafkaui-rtr.middlewares=chain-white-list@file"
  #     - "traefik.http.services.kafkaui-svc.loadbalancer.server.port=8080"

